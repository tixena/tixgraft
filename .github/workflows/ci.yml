name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install just
        run: |
          cargo install just --version 1.36.0 || echo "just already installed"

      - name: Check formatting
        run: just fmt-check

      - name: Run linting
        run: just lint

      - name: Run tests
        run: just test

      - name: Build release
        run: just build-release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tixgraft-binary
          path: target/release/tixgraft
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Install cargo-audit
        run: cargo install cargo-audit --version 0.21.0 || echo "cargo-audit already installed"

      - name: Run security audit
        run: cargo audit

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Discord Message
        id: prepare-message
        run: |
          # Get branch name
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"

          # Special emoji for master/main branch
          if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
            BRANCH_EMOJI="‚úÖ"
          else
            BRANCH_EMOJI="üîß"
          fi

          # Get commit author and message
          COMMIT_AUTHOR="${{ github.event.head_commit.author.name || github.actor }}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"

          # Check if it's a PR
          if [[ "${{ github.event.pull_request.number }}" != "" ]]; then
            PR_INFO="üìã **Pull Request:** #${{ github.event.pull_request.number }}"
          else
            PR_INFO="üìù **Direct push to branch**"
          fi

          # Get build status
          TEST_STATUS="${{ needs.test.result }}"
          AUDIT_STATUS="${{ needs.security-audit.result }}"

          if [[ "$TEST_STATUS" == "success" && "$AUDIT_STATUS" == "success" ]]; then
            STATUS_EMOJI="üéâ"
            STATUS_TEXT="**SUCCESS**"
            COLOR="3066993"  # Green
            TITLE_PREFIX=""
            FAILURE_MENTION=""
          else
            STATUS_EMOJI="üö®üî•üí•"
            STATUS_TEXT="**üö® CRITICAL FAILURE üö®**"
            COLOR="16711680"  # Bright Red
            TITLE_PREFIX="‚ö†Ô∏è **URGENT** ‚ö†Ô∏è "
            FAILURE_MENTION="@here "
          fi

          # Save variables for next step
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "BRANCH_EMOJI=$BRANCH_EMOJI" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "PR_INFO=$PR_INFO" >> $GITHUB_ENV
          echo "STATUS_EMOJI=$STATUS_EMOJI" >> $GITHUB_ENV
          echo "STATUS_TEXT=$STATUS_TEXT" >> $GITHUB_ENV
          echo "COLOR=$COLOR" >> $GITHUB_ENV
          echo "TEST_STATUS=$TEST_STATUS" >> $GITHUB_ENV
          echo "AUDIT_STATUS=$AUDIT_STATUS" >> $GITHUB_ENV
          echo "TITLE_PREFIX=$TITLE_PREFIX" >> $GITHUB_ENV
          echo "FAILURE_MENTION=$FAILURE_MENTION" >> $GITHUB_ENV

      - name: Send Discord Notification
        if: secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          # Use webhook from GitHub secrets
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"

          # Create JSON payload with failure-specific content
          if [[ "${{ env.STATUS_TEXT }}" == "**SUCCESS**" ]]; then
            DESCRIPTION="**Repository:** ${{ github.repository }}\n${{ env.PR_INFO }}\n\n**Branch:** ${{ env.BRANCH_EMOJI }} \`${{ env.BRANCH_NAME }}\`\n**Author:** üë§ ${{ env.COMMIT_AUTHOR }}\n**Commit:** \`${{ github.sha }}\`\n\n**Message:**\n\`\`\`\n${{ env.COMMIT_MESSAGE }}\n\`\`\`"
          else
            DESCRIPTION="üö® **BUILD FAILURE DETECTED** üö®\n\n**Repository:** ${{ github.repository }}\n${{ env.PR_INFO }}\n\n**Failed Branch:** ${{ env.BRANCH_EMOJI }} \`${{ env.BRANCH_NAME }}\`\n**Responsible Author:** üë§ ${{ env.COMMIT_AUTHOR }}\n**Failing Commit:** \`${{ github.sha }}\`\n\n**Commit Message:**\n\`\`\`\n${{ env.COMMIT_MESSAGE }}\n\`\`\`\n\nüîß **Action Required:** Please check the GitHub Actions logs and fix the issues immediately!\nüìã **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi

          cat << EOF > discord_payload.json
          {
            "content": "${{ env.FAILURE_MENTION }}${{ env.TITLE_PREFIX }}",
            "embeds": [
              {
                "title": "${{ env.STATUS_EMOJI }} TixGraft - ${{ env.STATUS_TEXT }}",
                "description": "$DESCRIPTION",
                "color": ${{ env.COLOR }},
                "fields": [
                  {
                    "name": "üß™ Tests & Build",
                    "value": "${{ env.TEST_STATUS }}",
                    "inline": true
                  },
                  {
                    "name": "üõ°Ô∏è Security Audit",
                    "value": "${{ env.AUDIT_STATUS }}",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
                "footer": {
                  "text": "GitHub Actions",
                  "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                }
              }
            ]
          }
          EOF

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -d @discord_payload.json \
               "$WEBHOOK_URL"

          echo "Discord notification sent!"

      - name: Console Output
        run: |
          if [[ "${{ env.STATUS_TEXT }}" == "**SUCCESS**" ]]; then
            echo "üéâ Build and tests successful!"
          else
            echo "‚ùå Build or tests failed"
            echo "üìã Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
